Generator Expressions

def binary(iterable):
    for val in iterable:
        yield bin(val)

for i in binary(range(10)):
    print(i)

nums = (bix(x) for x in range(10))
for i in nums:
    print(i)
-------------------------------------------------------------------------------
#Filtering
nums = (bin(x) for x in range(10) if x % 3 == 0)
for i in nums:
    print(i)

vals = ['Apple', 'banana', 'FROG', 'POTATO', 'Rocks']
nums = (v for v in vals if v.isupper())
for i in nums:
    print(i)
-------------------------------------------------------------------------------
#Using multiple iterables
g = ((x, y) for x in range(3) for y in range(3))
for tup in g:
    print(tup)

h = ((x, y) for x in range(0, 5) for y in range(0, x))
for i in h:
    print(i)

# Order matters
h = (str(x) for y in range(0, x) for x in range(0, 5)) # NameError
-------------------------------------------------------------------------------
h = ((y for y in x if y.isupper()) for x in vals)
for i in h:
    for j in i:
        print(j)
-------------------------------------------------------------------------------
List Comprehensions
h = [v.upper() for v in vals]

h = [[y for y in x if y.isupper()] for x in vals]
-------------------------------------------------------------------------------
Dictionary Comprehensions
h = {v:v.upper() for v in vals}

h = {v:[c for c in v if c.isupper()] for v in vals}
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
--------------------------------------------------------------------------------
