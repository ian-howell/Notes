Generator Expressions

def binary(iterable):
    for val in iterable:
        yield bin(val)

for i in binary(range(10)):
    print(i)

nums = (bix(x) for x in range(10))
for i in nums:
    print(i)
-------------------------------------------------------------------------------
#Filtering
nums = (bin(x) for x in range(10) if x % 3 == 0)
for i in nums:
    print(i)

vals = ['Apple', 'banana', 'FROG', 'POTATO', 'Rocks']
nums = (v for v in vals if v.isupper())
for i in nums:
    print(i)
-------------------------------------------------------------------------------
#Using multiple iterables
g = ((x, y) for x in range(3) for y in range(3))
for tup in g:
    print(tup)

h = ((x, y) for x in range(0, 5) for y in range(0, x))
for i in h:
    print(i)

# Order matters
h = (str(x) for y in range(0, x) for x in range(0, 5)) # NameError
-------------------------------------------------------------------------------
h = ((y for y in x if y.isupper()) for x in vals)
for i in h:
    for j in i:
        print(j)
-------------------------------------------------------------------------------
List Comprehensions
h = [v.upper() for v in vals]

h = [[y for y in x if y.isupper()] for x in vals]
-------------------------------------------------------------------------------
Dictionary Comprehensions
h = {v:v.upper() for v in vals}

h = {v:[c for c in v if c.isupper()] for v in vals}
-------------------------------------------------------------------------------
Higher Order Functions 1
- Functions that accept functions as arguments
def is_even(value):
    return value % 2 == 0

def take_while(check, iterable):
    for x in iterable:
        if check(x):
            yield x
        else
            return

EXAMPLE:
vals = [0, 2, 4, 6, 7, 10]
list(take_while(is_even, vals))
-------------------------------------------------------------------------------
Higher Order Functions 2
- Functions that can return functions
def new_print(prefix):
    def inner(*args, **kwargs):
        print(prefix, *args, **kwargs)
    return inner

EXAMPLE:
debug = new_print("DEBUG:")
debug("potato", "frog")
-------------------------------------------------------------------------------
Map and Filter
- map(func, iterable)
    - returns an iterable that yields func(x) for every x in the iterable
[int(x) for x in ['10', '12', '5']
map(int, ['10', '12', '5'])

-filter(func, iterable)
    - returns an iterable that yields items from the iterable provided that
        func(x) returns true for an item x
[x for x in [10, 12, 5] if x%2==0] #[10, 12]
filter(is_even, [10, 12, 5])
-------------------------------------------------------------------------------
Partial Function Applications
def base2(val):
    return int(val, base=2)

import functools
def add(x, y):
    return x + y
add3 = functools.partial(add, 3)
add3(10) # 13

#THIS NEXT LINE DOESNT WORK
map(add, [10, 12, 5])
#The following line DOES work
map(add3, [10, 12, 5]) #iterable -> [13, 15, 18]
