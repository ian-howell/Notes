Example questions
x = ['a', 'b', 'c', 'd']
for i in x[::2]:
    print(i)
# a
# c
---------------------------------------------------------
for i in x[1:]:
    print(i)
# b
# c
# d
---------------------------------------------------------
for i in x[:-1]:
    print(i)
# a
# b
# c
---------------------------------------------------------
y = 0
for i in x[y:]:
    print(i)
# a
# b
# c
# d
---------------------------------------------------------
for i in range(0, 3):
    print(i)
# 0
# 1
# 2
---------------------------------------------------------
for i in range(0, 3, 1):
    print(i)
# 0
# 1
# 2
---------------------------------------------------------
for i in range(0, 10, 2):
    print(i)
# 0
# 2
# 4
# 6
# 8
---------------------------------------------------------
n = range(0, 10)
n.append(10) # AttributeError
n = list(range(0, 10))
n.append(10)
n
[0, 1, 2, ..., 9, 10]

for i in n[0::2]:
    print(i)
# 0
# 2
# 4
# 6
# 8
# 10

for i in n[1::2]:
    print(i)
# prints odd indices
---------------------------------------------------------
# Multiline string
# Whitespace on the left is preserved. unfortunately
def func(a):
    a = '''
    Hey
    How
    are
    you
    '''
---------------------------------------------------------
# Example of doc string (documentation)
# USES PEP0257
def func(b):
    ''' This function prints out a msg
    :param str b: the msg
    return: None
    rtype: None
    raises SomeError if b is too long
    '''
    print(b)
---------------------------------------------------------
#Naming Conventions
- Don't use names defined in the Python Standard library
- Variables, functions, classes should not clash
#BAD
list = [1, 2, 3]
str = 5
---------------------------------------------------------
Exception Handling
1. Syntax Error
- your code is bad
- Python cannot read your code
- Example:
    fir i in range(10):
2. Run-Timer Error
- Your logic is bad
- Python encountered a problem, and cannot
    continue without assistance
- Example:
    for i in [1, 2, 3]:
        pront(i) #Raises a NameError exception
- Whenever a run-time error occurs, an exception
    is thrown
    - "throw" == "raise"
- Helpful for tracking/locating logical errors in code

x = {'a':10, 'b':50}
print(x['c']) #Raises KeyError

# Interpreter shows this:
Traceback...
.........#files/functions involved
KeyError: 'c'
---------------------------------------------------------
Exceptions
- Whenever an exception is thrown, it "bubbles up"
    the function call stack until it is either
    caught and handled, or it reaches the top
- Exceptions can be caught and handled as appropriate

#unhandled.py
def inc_by_4(val):
    return val + 4


def inc_list_by_4(lst):
    new_list = []
    for v in lst:
        new_list.append(inc_by_4(v))
    return new_list


def main():
    x = [1, 2, 3, "frog"]
    y = inc_list_by_4(x) #TypeError
    print(y)


main()
---------------------------------------------------------
#handled.py
def print_name(person):
    try:
        print(person['name'])
    except KeyError:
        print("Person has no name")


x = {'name':'Frank', 'id':123}
print_name(x) # Frank

y = {'id':345}
print_name(y) # Person has no name
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
