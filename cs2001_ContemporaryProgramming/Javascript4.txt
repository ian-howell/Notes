Anonymous Functions and Function Expressions
===============================================================================
Anonymous Functions
// Function Declaration
function foo() {
    return 3;
}

console.log(foo()); // 3
console.log(foo); // [function: foo]

// Function Expression
let foo = function() {
    return 3;
};

console.log(foo()); // 3
console.log(foo); // [function]
-------------------------------------------------------------------------------
Some Examples

Ex1
let prius = {color: ''};
paint_green(prius);
console.log(prius); // {color: 'green'}
let paint_green = function(car) {
    car.color = 'green';
};
paint_green(prius);
console.log(prius); // {color: 'green'}

Ex2
let cubify = function(x) {
    return x*x*x;
};

let twocubed = cubify(2);
console.log(twoCubed); // 8

Ex3
let factorial = function fac(n) {
    return n < 2 ? 1 : fac(n-1) * n;
};
console.log(factorial(3)); // 6

Ex4
function map(f, a) {
    let result = [], i;
    for (i = 0; i < a,length; i++)
        result.append(f(a[i]));
    return result;
}
let list = [0, 2, 4, 6, 8, 10];
let newList = map(function(x) {
    return x * x;
}, list);
console.log(newList); // [0, 4, 16, 36, 64, 100]

Ex5
let paint_func;
if (car.manu === 'Toyota') {
    paint_func = function(car) {
        car.color = 'red';
    };
}
-------------------------------------------------------------------------------
Function Scoping and Hoisting
- Function definitions are hoisted to the top of the program WITH their
  definitions

console.log(square(5)); // 25
function square(x) { return x*x;}

// Different file or something...
console.log(square(5)); // ReferenceError - Function Expressions do not get hoisted
square = function(x){
    return x * x;
};

// Different file or something...
console.log(square(5)); // TypeError - square is undefined until the next line
let square = function(x){
    return x * x;
};

Variables define inside a function are not accessible from the outside

Ex1
let num1 = 20, num2 = 3;
function multiply(){
    let x = 10;
    return num1 * num2;
}
console.log(multiply()); // 60
console.log(x); // ReferenceError - x does not exist

Ex2
function get_score(){
    let name = 'Leopard', points = 50;
    function format_score(){
        return name + ': ' ++ points;
    }
    return format_score();
}
console.log(get_score); // [function: get_score]
console.log(get_score()); // [function: format_score]
console.log(get_score()()); // Leopard: 50
-------------------------------------------------------------------------------
IIFE's
Immediately Invoked Function Expressions
// Create a function expression
let foo = function(){};
// Immediately call it - no other code here
foo();

// Same thing as the last 2 lines of code
(function(){})();

let x = (function(){ return 3; })();
console.log(x); // 3
-------------------------------------------------------------------------------
Node Modules
He's drawing rectangles. Imagine these in rectangles

main.js-------------------------------------------------FILE
var myfuncs = require('./myfuncs');
myfuncs.foo();


myfuncs.js----------------------------------------------FILE
function foo(){
    console.log('heyo');
}
module.exports = {
    foo:foo
};

Also acceptable:
main.js-------------------------------------------------FILE
let myfuncs = require('./myfuncs');
myfuncs();


myfuncs.js----------------------------------------------FILE
modules.exports = function(){
    console.log('heyo');
};

* Quick convention
require('name'); // Refers to require NPM packages
require('./name'); // Refers to files in CWD
-------------------------------------------------------------------------------
module.exports vs exports
- point to the same thing UNTIL you change what exports is 
